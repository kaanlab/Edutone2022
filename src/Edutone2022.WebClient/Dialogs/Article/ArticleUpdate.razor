@inject HttpClient httpClient

<MudDialog>
    <DialogContent>
        <EditForm EditContext="@editContext">
            <DataAnnotationsValidator />

            @if(imgUrl is not null)
            {
                <img class="img-fluid" src="@imgUrl">
            }
            else
            {
                if(Article.Image is not null)
                {
                    <img class="img-fluid" src="@Article.Image.FullPath">
                }
            }
            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png" />
            <MudFab HtmlTag="label"
                    Color="Color.Secondary"
                    Icon="@Icons.Filled.Image"
                    Label="Загрузить изображение"
                    for="fileInput" />

            <MudTextField Label="Название" Class="mt-3" Lines="2" @bind-Value="Article.Title" For="@(() => Article.Title)" />
            <MudText Typo="Typo.body2" Class="my-4">Название</MudText>

            <MudTextField Label="Содержание" Class="mt-3" Lines="2" @bind-Value="Article.Content" For="@(() => Article.Content)" />
            <MudText Typo="Typo.body2" Class="my-4">Содержание</MudText>
           
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отменить</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Color="Color.Info" OnClick="Update" Disabled="@formInvalid">Сохранить</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ArticleModel Article { get; set; } = new ArticleModel();


    IBrowserFile file;
    string imgUrl;
    private bool formInvalid = true;
    private EditContext editContext;
    private string authUserId;
    UploadFileRequest uploadFile;



    protected override async Task OnInitializedAsync()
    {
        var authUser = (await authenticationState).User;
        authUserId = authUser.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Sid).Value;

        editContext = new EditContext(Article);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        formInvalid = !editContext.Validate();
        StateHasChanged();
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        file = e.File;
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string imageType = file.ContentType;
        imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
        uploadFile = new UploadFileRequest
            {
                FileContent = buffers,
                FileName = file.Name
            };
    }

    async Task Update()
    {
        Article.UserId = authUserId;
        if (uploadFile is not null)
        {
            var response = await httpClient.PostAsJsonAsync<UploadFileRequest>("/api/upload/article", uploadFile);
            if (response.IsSuccessStatusCode)
            {
                var fileModel = await response.Content.ReadFromJsonAsync<FileModel>();
                Article.Image = fileModel;
            }        
        }
        MudDialog.Close(DialogResult.Ok(Article));
    }

    void Cancel() => MudDialog.Cancel();
}