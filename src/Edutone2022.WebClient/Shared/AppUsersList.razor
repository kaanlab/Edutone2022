@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if (appUsers is not null)
{
    <MudTable Items="@appUsers" Hover="true" Class="my-5">
        <ToolBarContent>
            <MudIconButton Icon="@Icons.Material.Filled.AddBox" Color="Color.Primary" Size="Size.Large" @onclick="AddUser" Class="mr-3" />
            <MudText Typo="Typo.h6">Пользователи</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Аватар</MudTh>
            <MudTh>Имя пользователя</MudTh>
            <MudTh>Логин</MudTh>
            <MudTh>Почта</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Изображение">
                <img class="img-thumbnail" src="@context.Avatar.FullPath" style="min-height:100px;height:100px;" />
            </MudTd>
            <MudTd DataLabel="Название училища">@context.DisplayName</MudTd>
            <MudTd DataLabel="Логин">@context.UserName</MudTd>
            <MudTd DataLabel="Почта">@context.Email</MudTd>
            <MudTd><MudButton Color="Color.Info" @onclick="@((e) => UpdateUser(context))">Изменить</MudButton></MudTd>
            <MudTd><MudButton Color="Color.Warning" @onclick="@((e) => ChangePassword(context))">Сменить пароль</MudButton></MudTd>
            <MudTd><MudButton Color="Color.Error" @onclick="@((e) => DeleteUser(context))">Удалить</MudButton></MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
}


@code {
    private List<AppUserModel> appUsers;

    protected override async Task OnInitializedAsync()
    {
        appUsers = await httpClient.GetFromJsonAsync<List<AppUserModel>>("api/user/all");
    }

    private async Task AddUser()
    {

        var dialog = DialogService.Show<UserAdd>("Добавление пользователя");
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<AppUserModel>("api/user/add", result.Data as AppUserModel);
            if (response.IsSuccessStatusCode)
            {
                var addedUser = await response.Content.ReadFromJsonAsync<AppUserModel>();
                appUsers.Add(addedUser);
                Snackbar.Add("Пользователь успешно добавлен!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу добавить пользователя!", Severity.Error);
            }
        }
    }

    private async Task UpdateUser(AppUserModel context)
    {
        var appUserModel = new AppUserUpdateRequest
            {
                DisplayName = context.DisplayName,
                Email = context.Email,
                Avatar = context.Avatar,
                UserName = context.UserName
            };
        var parameters = new DialogParameters { ["context"] = appUserModel };

        var dialog = DialogService.Show<UserUpdate>("Обновить данные пользователя", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PutAsJsonAsync<AppUserUpdateRequest>("api/user/update", result.Data as AppUserUpdateRequest);
            if (response.IsSuccessStatusCode)
            {
                var updatedUser = await response.Content.ReadFromJsonAsync<AppUserModel>();
                var index = appUsers.IndexOf(context);
                appUsers.Remove(context);
                appUsers.Insert(index, updatedUser);
                Snackbar.Add("Информация о пользователе успешно обновлена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить пользователя!", Severity.Error);
            }
        }
    }

    private async Task ChangePassword(AppUserModel context)
    {
        var appUserModel = new AppUserChangePassRequest { DisplayName = context.DisplayName, UserName = context.UserName };
        var parameters = new DialogParameters { ["context"] = appUserModel };

        var dialog = DialogService.Show<UserChangePass>("Сменить пароль пользователя", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<AppUserChangePassRequest>("api/user/change-pass", result.Data as AppUserChangePassRequest);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Пароль успешно обновлен!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить пароль!", Severity.Error);
            }
        }
    }

    private async Task DeleteUser(AppUserModel context)
    {
        var parameters = new DialogParameters { ["context"] = context };

        if (context.UserName == Global.SITE_ADMIN_ACCOUNT)
        {
            Snackbar.Add($"Не могу удалить пользователя {context.DisplayName}!", Severity.Error);
        }
        else
        {
            var dialog = DialogService.Show<UserDelete>("Удалить пользователя", parameters);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                var userToDelete = result.Data as AppUserModel;
                var response = await httpClient.DeleteAsync($"api/user/delete/{userToDelete.UserName}");
                if (response.IsSuccessStatusCode)
                {
                    appUsers.Remove(userToDelete);
                    Snackbar.Add("Пользователь успешно удален!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Не могу удалить пользователя!", Severity.Error);
                }

            }
        }
    }
}