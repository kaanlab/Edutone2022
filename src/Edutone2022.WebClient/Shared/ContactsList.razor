@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<div>
    <AuthorizeView>
        <MudIconButton Icon="@Icons.Material.Filled.AddBox" Color="Color.Primary" Size="Size.Large" @onclick="AddContact" Class="mr-3" />
    </AuthorizeView>
</div>

@if (employeeContacts is not null)
{
    @if (employeeContacts.Count > 0)
    {
        foreach (var contact in employeeContacts)
        {
            <div class="col-lg-4 col-md-6">
                <div class="row">
                    <div class="ml-auto">
                        <AuthorizeView>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" @onclick="(e) => UpdateContact(contact)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" @onclick="(e) => DeleteContact(contact)" />
                        </AuthorizeView>
                    </div>
                </div>
                <!-- Team -->
                <div class="team-sm">
                    <!-- Team Member Image -->
                    <div class="image">
                         @if (contact.Image is not null)
                        {
                            <img class="w-100" src="@contact.Image.FullPath" alt="member-image">
                        }
                        else
                        {
                           <img class="w-100" src="images/blank-team.png" alt="member-image">
                        }
                        <!-- Social Contacts -->
                        <div class="social-links">
                            <ul class="list-inline">
                                <li class="list-inline-item contact-info">@contact.Email</li>
                                <li class="list-inline-item contact-info">@contact.PhoneNumber</li>
                            </ul>
                        </div>
                    </div>
                    <!-- Name -->
                    <h3>@contact.Name</h3>
                    <!-- Position -->
                    <cite>@contact.JobTitle</cite>
                    <!-- Description -->
                    <p>@contact.Responsibility</p>
                </div>
            </div>            
        }
    }
    else
    {
        <div class="col-md-4">
            <MudAlert Severity="Severity.Normal">Контактов не найдено...</MudAlert>
        </div>
    }
}
else
{
    <MudAlert Severity="Severity.Warning">Загрузка контактов...</MudAlert>
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}

@code {
    List<EmployeeContactModel> employeeContacts;

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        employeeContacts = await httpClient.GetFromJsonAsync<List<EmployeeContactModel>>("api/contact/all");
    }

    private async Task AddContact()
    {
        var dialog = DialogService.Show<ContactAdd>("Добавление контакта", maxWidth);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var response = await httpClient.PostAsJsonAsync<ContactAddRequest>("api/contact/add", result.Data as ContactAddRequest);
            if (response.IsSuccessStatusCode)
            {
                var addedContact = await response.Content.ReadFromJsonAsync<EmployeeContactModel>();
                employeeContacts.Add(addedContact);
                Snackbar.Add("Контакт успешно добавлен!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу добавить контакт!", Severity.Error);
            }
        }
    }

    private async Task UpdateContact(EmployeeContactModel contact)
    {
        var parameters = new DialogParameters { ["contact"] = contact };

        var dialog = DialogService.Show<ContactUpdate>("Обновить контакт", parameters, maxWidth);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var response = await httpClient.PutAsJsonAsync<EmployeeContactModel>($"api/contact/update/{contact.Id}", result.Data as EmployeeContactModel);
            if (response.IsSuccessStatusCode)
            {
                var updatedContact = await response.Content.ReadFromJsonAsync<EmployeeContactModel>();
                var index = employeeContacts.IndexOf(contact);
                employeeContacts.Remove(contact);
                employeeContacts.Insert(index, updatedContact);
                Snackbar.Add("Информация успешно обновлена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу обновить информацию о контакте!", Severity.Error);
            }
        }
    }

    private async Task DeleteContact(EmployeeContactModel employeeContact)
    {
        var parameters = new DialogParameters { ["employeeContact"] = employeeContact };

        var dialog = DialogService.Show<ContactDelete>("Удалить контакт", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var contactToDelete = result.Data as EmployeeContactModel;
            var response = await httpClient.DeleteAsync($"api/contact/delete/{contactToDelete.Id}");
            if (response.IsSuccessStatusCode)
            {
                employeeContacts.Remove(contactToDelete);
                Snackbar.Add("Информация о контакте успешно удалена!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Не могу удалить контакт!", Severity.Error);
            }
        }
    }
}
