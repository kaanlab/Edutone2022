@page "/"

@inject HttpClient httpClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<!--====================================
=            Hero Section            =
=====================================-->
<section class="section gradient-banner">
	<div class="shapes-container">
		<div class="shape" data-aos="fade-down-left" data-aos-duration="1500" data-aos-delay="100"></div>
		<div class="shape" data-aos="fade-down" data-aos-duration="1000" data-aos-delay="100"></div>
		<div class="shape" data-aos="fade-up-right" data-aos-duration="1000" data-aos-delay="200"></div>
		<div class="shape" data-aos="fade-up" data-aos-duration="1000" data-aos-delay="200"></div>
		<div class="shape" data-aos="fade-down-left" data-aos-duration="1000" data-aos-delay="100"></div>
		<div class="shape" data-aos="fade-down-left" data-aos-duration="1000" data-aos-delay="100"></div>
		<div class="shape" data-aos="zoom-in" data-aos-duration="1000" data-aos-delay="300"></div>
		<div class="shape" data-aos="fade-down-right" data-aos-duration="500" data-aos-delay="200"></div>
		<div class="shape" data-aos="fade-down-right" data-aos-duration="500" data-aos-delay="100"></div>
		<div class="shape" data-aos="zoom-out" data-aos-duration="2000" data-aos-delay="500"></div>
		<div class="shape" data-aos="fade-up-right" data-aos-duration="500" data-aos-delay="200"></div>
		<div class="shape" data-aos="fade-down-left" data-aos-duration="500" data-aos-delay="100"></div>
		<div class="shape" data-aos="fade-up" data-aos-duration="500" data-aos-delay="0"></div>
		<div class="shape" data-aos="fade-down" data-aos-duration="500" data-aos-delay="0"></div>
		<div class="shape" data-aos="fade-up-right" data-aos-duration="500" data-aos-delay="100"></div>
		<div class="shape" data-aos="fade-down-left" data-aos-duration="500" data-aos-delay="0"></div>
	</div>
	@if (mainModel is not null)
	{
		<div class="container">
			<div class="row align-items-center">
				<div class="col-md-6 order-2 order-md-1 text-center text-md-left">
					<h1 class="text-white font-weight-bold mb-4">@mainModel.Title</h1>
					<p class="text-white mb-5">
						@mainModel.Description
					</p>
				</div>
				<div class="col-md-6 text-center order-1 order-md-2">
					<AuthorizeView>
						<MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Color="Color.Error" Size="Size.Large" @onclick="(e) => Update(mainModel)" />
					</AuthorizeView>
				</div>
			</div>
		</div>
	}
</section>
<!--====  End of Hero Section  ====-->

<section class="section pt-0 position-relative pull-top featured-article">
	<div class="container">
		<div class="rounded shadow p-5 bg-white">
			<div class="row">
				<ArticlesList />
			</div>
		</div>
	</div>
</section>

@code {

	private MainPageModel mainModel;
	DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };

	protected override async Task OnInitializedAsync()
	{
		mainModel = await httpClient.GetFromJsonAsync<MainPageModel>("api/page/main");
	}

	private async Task Update(MainPageModel mainModel)
	{
		var parameters = new DialogParameters { ["mainModel"] = mainModel };

		var dialog = DialogService.Show<MainPageUpdate>("Обновить раздел", parameters, maxWidth);
		var result = await dialog.Result;
		if (!result.Cancelled)
		{
			var response = await httpClient.PostAsJsonAsync<MainPageModel>($"api/page/update/main", result.Data as MainPageModel);
			if (response.IsSuccessStatusCode)
			{
				mainModel = await response.Content.ReadFromJsonAsync<MainPageModel>();
				Snackbar.Add("Информация успешно обновлена!", Severity.Success);
			}
			else
			{
				Snackbar.Add("Не могу обновить!", Severity.Error);
			}
		}
	}
}